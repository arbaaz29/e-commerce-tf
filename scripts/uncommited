# ecomdbpasswd=$(aws secretsmanager get-secret-value --secret-id ${secret_arn} --query SecretString --output text)

# mysql -h ${mysqlendpoint} -u ${username} --ssl-ca=${certarn} --ssl-mode=REQUIRED -p${ecomdbpasswd}


# Create a Kinesis Firehose Delivery Stream for WAF Logs
# resource "aws_kinesis_firehose_delivery_stream" "waf_firehose" {
#   name        = "waf-logs-stream"
#   destination = "cloudwatch_logs"

#   cloudwatch_logs_configuration {
#     log_group_name = aws_cloudwatch_log_group.waf_logs.name
#   }

#   s3_configuration {
#     role_arn           = aws_iam_role.firehose_role.arn
#     bucket_arn         = aws_s3_bucket.waf_logs.arn
#     buffering_interval = 60
#     buffering_size     = 5
#     compression_format = "GZIP"
#   }

# }

# # IAM Role for Firehose to access CloudWatch & S3
# resource "aws_iam_role" "firehose_role" {
#   name = "firehose-waf-role"

#   assume_role_policy = jsonencode({
#     Statement = [{
#       Action = "sts:AssumeRole"
#       Effect = "Allow"
#       Principal = {
#         Service = "firehose.amazonaws.com"
#       }
#     }]
#   })
# }

# # CloudWatch Log Group for WAF Logs
# resource "aws_cloudwatch_log_group" "waf_logs" {
#   name              = "/aws/waf/logs/web-acl"
#   retention_in_days = 30
# }

# # S3 Bucket to Store Logs
# resource "aws_s3_bucket" "waf_logs" {
#   bucket = "my-waf-logs-bucket"
# }

# # WAF Logging Configuration
# resource "aws_wafv2_web_acl_logging_configuration" "waf_logging" {
#   log_destination_configs = [aws_kinesis_firehose_delivery_stream.waf_firehose.arn]
#   resource_arn           = aws_wafv2_web_acl.waf_acl.arn
# }

    # APACHE_LOG_DIR = "/var/log/httpd"
    # MYSQLENDPOINT = aws_db_instance.rds.address
    # SQLUSER = "admin"
    # ECOMDBPASSWD = random_password.rds.result
    
// AWS SDK Configuration for RDS
\$rdsClient = new RdsClient([
    'region' => 'us-east-1',
    'version' => 'latest'
]);
    // Extract database credentials
    \$host = \$credentials["/\$baseName/database/endpoint"];
    \$dbname = \$credentials["/\$baseName/database/db"];
    \$username = \$credentials["/\$baseName/database/username"];

    // Generate RDS Authentication Token
    \$authToken = \$rdsClient->generateDbAuthToken([
        'DBHostname' => \$host,
        'DBPort' => 3306, // Default MySQL port
        'DBUsername' => \$username,
        'Region' => 'us-east-1',
    ]);




#!/bin/bash

# Set up logging
LOG_FILE="/var/log/ecommerce-setup.log"
exec > >(tee -a "$LOG_FILE") 2>&1

# Error handling function
handle_error() {
    echo "ERROR: $1" >&2
    exit 1
}

# Update and install necessary packages
sudo apt update -y || handle_error "Failed to update package lists"
sudo apt upgrade -y || handle_error "Failed to upgrade"
sudo apt-get install -y apache2 git mysql-client unzip jq  php libapache2-mod-php php-mysql || handle_error "Failed to install required packages"

# Install Composer
export COMPOSER_HOME="$HOME/.composer"
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"  || handle_error "unable to download composer"
php composer-setup.php || handle_error "composer not installed"
php -r "unlink('composer-setup.php');"  || handle_error "cannot unlink the composer"

# Move Composer to binaries for it to be available in the path
if [ -f composer.phar ]; then
    sudo mv composer.phar /usr/local/bin/composer
else
    handle_error "Composer installation failed"
fi

# Verify if Composer has been installed properly
composer --version

# sudo mv composer.phar /usr/local/bin/composer  || handle_error "unable to mv composer"

#verify if compose has been installed properly
composer --version

# Install AWS CLI
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" || handle_error "Failed to download AWS CLI"
unzip awscliv2.zip || handle_error "Failed to unzip AWS CLI"
sudo ./aws/install || handle_error "Failed to install AWS CLI"

# Start and enable Apache
sudo systemctl start apache2 || handle_error "Failed to start Apache"
sudo systemctl enable apache2 || handle_error "Failed to enable Apache"

# Modify confiuration to launch php first
echo "
<IfModule mod_dir.c>
    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
</IfModule>
" | sudo tee /etc/apache2/mods-enabled/dir.conf > /dev/null || handle_error "Failed to replace config file"

# Restart Apache
sudo systemctl restart apache2 || handle_error "Failed to restart Apache"

# remove the default html

sudo rm -rf /var/www/html/index.html || handle_error "Failed to delete index"

# download and move the application

git clone https://github.com/edaviage/818N-E_Commerce_Application.git || handle_error "unable to download github repo"

cd 818N-E_Commerce_Application || handle_error "Failed to change directory to 818N-E_Commerce_Application"

sudo mv * /var/www/html || handle_error "Unable to move the repo"

# Clone the Git repository
git clone https://github.com/arbaaz29/e-commerce-db.git || handle_error "Failed to clone repository"
cd e-commerce-db || handle_error "Failed to change directory to e-commerce-db"

# Verify repository contents
[ -f ecommerce_1.sql ] || handle_error "SQL file ecommerce_1.sql not found in repository"

# Download RDS SSL certificate
wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem || handle_error "Failed to download RDS SSL certificate"

# Retrieve database credentials from Secrets Manager you may need to change the name fpr secret-id as per the name you have specified for secret in secretsmanager
DB_CREDENTIALS=$(aws secretsmanager get-secret-value \
  --secret-id "${basename}/database-credentials-${secretnumber}" \
  --query SecretString \
  --output text)

# Parse JSON credentials
MYSQLENDPOINT=$(echo $DB_CREDENTIALS | jq -r '.endpoint')
SQLUSER=$(echo $DB_CREDENTIALS | jq -r '.username')
ECOMDBPASSWD=$(echo $DB_CREDENTIALS | jq -r '.password')
db=$(echo $DB_CREDENTIALS | jq -r '.db')

# Debugging: Print out retrieved values (remove in production)
echo "Endpoint: $MYSQLENDPOINT"
echo "Username: $SQLUSER"
echo "dbname: $db"

# Load SQL data into the database with additional error checking
mysql -h "$MYSQLENDPOINT" -u "$SQLUSER" \
    --ssl-ca=global-bundle.pem \
    --ssl-mode=REQUIRED \
    -p"$ECOMDBPASSWD" \
    "$db" < ecommerce_1.sql || handle_error "Failed to import SQL data to database"

# Final success message
echo "Deployment completed successfully at $(date)"

cd /var/www/html/includes/ || handle_error "unable to move to directory"

composer require aws/aws-sdk-php  || handle_error "aws sdk not installed"

wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem || handle_error "Failed to download RDS SSL certificate"

# Retrieve database credentials from Secrets Manager you may need to change the name fpr secret-id as per the name you have specified for secret in secretsmanager
DB_CREDENTIALS=$(aws secretsmanager get-secret-value \
  --secret-id "${basename}/database-credentials-${secretnumber}" \
  --query SecretString \
  --output text)

# Parse JSON credentials
MYSQLENDPOINT=$(echo $DB_CREDENTIALS | jq -r '.endpoint')
SQLUSER=$(echo $DB_CREDENTIALS | jq -r '.username')
ECOMDBPASSWD=$(echo $DB_CREDENTIALS | jq -r '.password')
db=$(echo $DB_CREDENTIALS | jq -r '.db')


cat <<EOF | sudo tee ./connect.php > /dev/null || handle_error "Failed to replace connect file"
<?php
require 'vendor/autoload.php';

use Aws\Ssm\SsmClient;
use Aws\Rds\RdsClient;
use Aws\Exception\AwsException;

// AWS SDK Configuration for SSM
\$ssmClient = new SsmClient([
    'region' => 'us-east-1',
    'version' => 'latest'
]);

\$baseName = 'e-commerce';
\$parameters = [
    "/\$baseName/database/endpoint",
    "/\$baseName/database/username",
    "/\$baseName/database/password",
    "/\$baseName/database/db"
];

try {
    \$credentials = [];

    // Fetch parameters from AWS SSM
    foreach (\$parameters as \$param) {
        \$result = \$ssmClient->getParameter([
            'Name' => \$param,
            'WithDecryption' => true // Decrypt SecureString values
        ]);
        \$credentials[\$param] = \$result['Parameter']['Value'];
    }



    // Path to the downloaded RDS root certificate
    \$sslCaPath = './global-bundle.pem'; // Update this path

    // Establish Database Connection using the authentication token and SSL
    \$dsn = "mysql:host=\$host;dbname=\$dbname;charset=utf8mb4";
    \$pdo = new PDO(\$dsn, \$username, \$authToken->get('AuthToken'), [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::MYSQL_ATTR_SSL_CA => \$sslCaPath,  // Specify the SSL certificate
        PDO::MYSQL_ATTR_SSL_KEY => null,       // Optional: Specify client key if needed
        PDO::MYSQL_ATTR_SSL_CERT => null       // Optional: Specify client certificate if needed
    ]);

    echo "Connected successfully using RDS authentication token with SSL!";
} catch (AwsException \$e) {
    error_log("AWS Error: " . \$e->getMessage());
    die("Could not connect to the database.");
} catch (Exception \$e) {
    error_log("General Error: " . \$e->getMessage());
    die("Could not retrieve parameters.");
}
?>
EOF



# Final success message
echo "php app deployed at $(date)"

wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb

sudo dpkg -i -E ./amazon-cloudwatch-agent.deb

sudo apt-get update && sudo apt-get install collectd -y


# Create CloudWatch Agent config file with CPU, Memory, Disk, and Network metrics
cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/bin/config.json
{
  "agent": {
    "metrics_collection_interval": 60,
    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
  },
  "logs": {
    "logs_collected": {
      "files": {
        "collect_list": [
          {
            "file_path": "/var/log/ecommerce-setup.log",
            "log_group_name": "/ecommerce/setup",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S"
          },
          {
            "file_path": "/var/log/apache2/access.log",
            "log_group_name": "/ecommerce/apache-access",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%d/%b/%Y:%H:%M:%S %z"
          },
          {
            "file_path": "/var/log/apache2/error.log",
            "log_group_name": "/ecommerce/apache-error",
            "log_stream_name": "{instance_id}",
            "timestamp_format": "%Y-%m-%d %H:%M:%S"
          }
        ]
      }
    }
  },
  "metrics": {
    "metrics_collected": {
      "cpu": {
        "measurement": [
          "cpu_usage_idle",
          "cpu_usage_user",
          "cpu_usage_system"
        ],
        "metrics_collection_interval": 60,
        "totalcpu": false
      },
      "disk": {
        "measurement": [
          "disk_used_percent"
        ],
        "resources": [
          "*"
        ],
        "metrics_collection_interval": 60
      },
      "mem": {
        "measurement": [
          "mem_used_percent"
        ],
        "metrics_collection_interval": 60
      },
      "net": {
        "measurement": [
          "bytes_sent",
          "bytes_recv"
        ],
        "resources": [
          "*"
        ],
        "metrics_collection_interval": 60
      }
    }
  }
}
EOF

# Start CloudWatch Agent with the new configuration
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
    -a fetch-config \
    -m ec2 \
    -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json \
    -s || handle_error "Failed to start CloudWatch Agent"

echo "CloudWatch Agent installed and configured successfully with CPU and system metrics."






<?php
require 'vendor/autoload.php';

    //export the respective params

    $endpoint =  "ecomdb.cr4uo2msqi5b.us-east-1.rds.amazonaws.com";
    $username = "admin";
    $password = "?VHpqQ$kvbasqP#B";
    $db = "ecomdb";

    // Path to the downloaded RDS root certificate
    $sslCaPath = './global-bundle.pem'; // Update this path

    // Establish Database Connection using the authentication token and SSL
    $dsn = "mysql:host=$endpoint;dbname=$db;charset=utf8mb4";
    $pdo = new PDO($dsn, $username, $password, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::MYSQL_ATTR_SSL_CA => $sslCaPath,  // Specify the SSL certificate
        PDO::MYSQL_ATTR_SSL_KEY => null,       // Optional: Specify client key if needed
        PDO::MYSQL_ATTR_SSL_CERT => null       // Optional: Specify client certificate if needed
    ]);

    echo "Connected successfully using RDS authentication token with SSL!";
} catch (AwsException $e) {
    error_log("AWS Error: " . $e->getMessage());
    die("Could not connect to the database.");
} catch (Exception $e) {
    error_log("General Error: " . $e->getMessage());
    die("Could not retrieve parameters.");
}
?>
