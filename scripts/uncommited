# ecomdbpasswd=$(aws secretsmanager get-secret-value --secret-id ${secret_arn} --query SecretString --output text)

# mysql -h ${mysqlendpoint} -u ${username} --ssl-ca=${certarn} --ssl-mode=REQUIRED -p${ecomdbpasswd}


# Create a Kinesis Firehose Delivery Stream for WAF Logs
# resource "aws_kinesis_firehose_delivery_stream" "waf_firehose" {
#   name        = "waf-logs-stream"
#   destination = "cloudwatch_logs"

#   cloudwatch_logs_configuration {
#     log_group_name = aws_cloudwatch_log_group.waf_logs.name
#   }

#   s3_configuration {
#     role_arn           = aws_iam_role.firehose_role.arn
#     bucket_arn         = aws_s3_bucket.waf_logs.arn
#     buffering_interval = 60
#     buffering_size     = 5
#     compression_format = "GZIP"
#   }

# }

# # IAM Role for Firehose to access CloudWatch & S3
# resource "aws_iam_role" "firehose_role" {
#   name = "firehose-waf-role"

#   assume_role_policy = jsonencode({
#     Statement = [{
#       Action = "sts:AssumeRole"
#       Effect = "Allow"
#       Principal = {
#         Service = "firehose.amazonaws.com"
#       }
#     }]
#   })
# }

# # CloudWatch Log Group for WAF Logs
# resource "aws_cloudwatch_log_group" "waf_logs" {
#   name              = "/aws/waf/logs/web-acl"
#   retention_in_days = 30
# }

# # S3 Bucket to Store Logs
# resource "aws_s3_bucket" "waf_logs" {
#   bucket = "my-waf-logs-bucket"
# }

# # WAF Logging Configuration
# resource "aws_wafv2_web_acl_logging_configuration" "waf_logging" {
#   log_destination_configs = [aws_kinesis_firehose_delivery_stream.waf_firehose.arn]
#   resource_arn           = aws_wafv2_web_acl.waf_acl.arn
# }

    # APACHE_LOG_DIR = "/var/log/httpd"
    # MYSQLENDPOINT = aws_db_instance.rds.address
    # SQLUSER = "admin"
    # ECOMDBPASSWD = random_password.rds.result